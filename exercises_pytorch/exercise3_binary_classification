import torch
import torch.nn as nn
import matplotlib.pyplot as plt

# 1. Generate synthetic binary classification data in PyTorch
torch.manual_seed(42)
n_samples_per_class = 500

# Class 0: centered at (2, 2)
class0 = torch.randn(n_samples_per_class, 2) * 0.75 + torch.tensor([2, 2])
labels0 = torch.zeros((n_samples_per_class, 1))

# Class 1: centered at (-2, -2)
class1 = torch.randn(n_samples_per_class, 2) * 0.75 + torch.tensor([-2, -2])
labels1 = torch.ones((n_samples_per_class, 1))

# Combine data
X = torch.cat([class0, class1], dim=0)
y = torch.cat([labels0, labels1], dim=0)

# Shuffle
shuffle_idx = torch.randperm(X.size(0))
X, y = X[shuffle_idx], y[shuffle_idx]

# Train/test split (80/20)
split_idx = int(0.8 * len(X))
train_X, test_X = X[:split_idx], X[split_idx:]
train_y, test_y = y[:split_idx], y[split_idx:]

# 2. Define the model
class BinaryClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(2, 16),
            nn.ReLU(),
            nn.Linear(16, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.net(x)

model = BinaryClassifier()

# 3. Loss and optimizer
loss_fn = nn.BCELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

# 4. Train loop
epochs = 1000
for epoch in range(epochs):
    model.train()
    y_pred = model(train_X)
    loss = loss_fn(y_pred, train_y)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if epoch % 100 == 0:
        with torch.no_grad():
            preds = (model(test_X) > 0.5).float()
            acc = (preds == test_y).float().mean()
        print(f"Epoch {epoch} | Loss: {loss.item():.4f} | Test Accuracy: {acc.item():.4f}")

# 5. Visualize decision boundary
def plot_decision_boundary(model, X, y):
    model.eval()
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = torch.meshgrid(
        torch.linspace(x_min, x_max, 100),
        torch.linspace(y_min, y_max, 100),
        indexing='ij'
    )
    grid = torch.cat([xx.reshape(-1, 1), yy.reshape(-1, 1)], dim=1)
    with torch.no_grad():
        preds = model(grid).reshape(xx.shape)

    plt.contourf(xx, yy, preds, levels=[0, 0.5, 1], cmap='coolwarm', alpha=0.6)
    plt.scatter(X[:, 0], X[:, 1], c=y.squeeze(), cmap='coolwarm', edgecolors='k')
    plt.title("Decision Boundary")
    plt.show()

plot_decision_boundary(model, X, y)

